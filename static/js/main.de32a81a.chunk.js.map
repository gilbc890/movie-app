{"version":3,"sources":["logo.jpg","Movie.js","MoviesList.js","MovieDetail.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","_ref","movie","react_default","a","createElement","Link","to","concat","id","Overdrive_min_default","Poster","src","poster_path","alt","title","styled","img","_templateObject","MoviesList","state","movies","fetch","res","json","this","setState","results","console","log","_context","t0","MovieGrid","map","src_Movie","key","PureComponent","div","MoviesList_templateObject","MovieDetail","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","Component","MovieDetail_templateObject","_templateObject2","App","BrowserRouter","className","logo","Switch","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.de32a81a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.536a472d.jpg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <Link to={`/${movie.id}`}>\n    <Overdrive id={movie.id}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    </Overdrive>\n  </Link>\n);\n\nexport default Movie;\n\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const Poster = styled.img`\n  box-shadow: 0 0 35px black;\n`;\n","/* eslint react/no-did-mount-set-state: 0 */\nimport React, { PureComponent } from 'react';\nimport styled from 'styled-components';\n\nimport Movie from './Movie';\n\nclass MoviesList extends PureComponent {\n  state = {\n    movies: [],\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(\n        'https://api.themoviedb.org/3/discover/movie?api_key=af071658ea9453a28f411cb8a7ef1c28&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1',\n      );\n      const movies = await res.json();\n      this.setState({ movies: movies.results });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <MovieGrid>\n        {this.state.movies.map(movie => (<Movie key={movie.id} movie={movie} />))}\n      </MovieGrid>\n\n    );\n  }\n}\n\nexport default MoviesList;\n\nconst MovieGrid = styled.div`\n  display: grid;\n  padding: 1rem;\n  grid-template-columns: repeat(6, 1fr);\n  grid-row-gap: 1rem;\n`;\n","/* eslint react/no-did-mount-set-state: 0 */\nimport React, { Component } from 'react';\nimport { Poster } from './Movie';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\n\nclass MovieDetail extends Component {\n  state = {\n    movie: {},\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=af071658ea9453a28f411cb8a7ef1c28&language=en-US`);\n      const movie = await res.json();\n      this.setState({\n        movie,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    const { movie } = this.state;\n    return (\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${this.state.movie.backdrop_path}`}>\n        <MovieInfo>\n          <Overdrive id={movie.id}>\n            <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n          </Overdrive>\n          <div>\n            <h1>{movie.title}</h1>\n            <h3>{movie.release_date}</h3>\n            <p>{movie.overview}</p>\n          </div>\n        </MovieInfo>\n      </MovieWrapper>\n    );\n  }\n}\n\nexport default MovieDetail;\n\nconst MovieWrapper = styled.div`\n  position: relative;\n  padding-top: 50vh;\n  background: url(${props => props.backdrop}) no-repeat;\n  background-size: cover;\n`;\n\nconst MovieInfo = styled.div`\n  background: white;\n  text-align:  left;\n  padding: 2rem 10%;\n  display: flex;\n  > div{\n    margin-left: 20px;\n  }\n  img {\n    position: relative;\n    top: -5rem;\n  }\n`;\n","/* eslint react/no-did-mount-set-state: 0 */\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\n\nimport logo from './logo.jpg';\nimport './App.css';\n\nimport MoviesList from './MoviesList';\nimport MovieDetail from './MovieDetail';\n\nconst App = () => (\n  <Router>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Link>\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={MoviesList} />\n        <Route path=\"/:id\" component={MovieDetail} />\n      </Switch>\n    </div>\n  </Router>\n);\n\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}